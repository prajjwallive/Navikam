#include "arduino_secrets.h"
#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/5278483a-c08c-4d6e-b807-858d5380b570 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLocation x;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h" // Include the thingProperties.h file generated by the Arduino IoT Cloud
#include <SPI.h> // Include the SPI library
#include <LoRa.h> // Include the LoRa library

#define LORA_SS 5   // LoRa radio chip select (CS) pin
#define LORA_RST 14 // LoRa radio reset (RST) pin
#define LORA_DI0 2 // LoRa radio digital input (DIO0) pin

void setup() { // Initialize serial and wait for port to open:
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
   LoRa.setPins(LORA_SS, LORA_RST, LORA_DI0);

  // Initialize LoRa module
 LoRa.begin(433E6); //  Set frequency to 433MHz
  LoRa.setSignalBandwidth(125E3); //  Set signal bandwidth to 125kHz
  LoRa.setSpreadingFactor(10); //  Set spreading factor to 10
  LoRa.setSyncWord(0xF3); //  Set sync word to 0xF3
  LoRa.enableCrc();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() { // Update Arduino IoT Cloud
  ArduinoCloud.update(); // Receive data from LoRa module
  if (LoRa.parsePacket()) {
    // Receive data
    while (LoRa.available()) {
      String receivedData = LoRa.readString();
      Serial.println("Received data: " + receivedData);

      int commaIndex = receivedData.indexOf(',');
      if (commaIndex != -1) {
        String latString = receivedData.substring(0, commaIndex); // Extract latitude
        String lonString = receivedData.substring(commaIndex + 1); // Extract longitude

        float latitude = latString.toFloat(); //  Convert latitude to float
        float longitude = lonString.toFloat();//  Convert longitude to float

        // Set the CloudLocation variable x with the extracted latitude and longitude
       x = Location(latitude,longitude);

        // Report the values to IoT Cloud
        ArduinoCloud.update();

        // Print values to Serial Monitor
        Serial.print("Latitude: ");
        Serial.println(latitude);
        Serial.print("Longitude: ");
        Serial.println(longitude);
      }
    }
  }
}